// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package engine

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type AssetType int64
const (
  AssetType_Stock AssetType = 1
  AssetType_Exchange AssetType = 2
)

func (p AssetType) String() string {
  switch p {
  case AssetType_Stock: return "Stock"
  case AssetType_Exchange: return "Exchange"
  }
  return "<UNSET>"
}

func AssetTypeFromString(s string) (AssetType, error) {
  switch s {
  case "Stock": return AssetType_Stock, nil 
  case "Exchange": return AssetType_Exchange, nil 
  }
  return AssetType(0), fmt.Errorf("not a valid AssetType string")
}


func AssetTypePtr(v AssetType) *AssetType { return &v }

func (p AssetType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AssetType) UnmarshalText(text []byte) error {
q, err := AssetTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AssetType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AssetType(v)
return nil
}

func (p * AssetType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ResponseState int64
const (
  ResponseState_StateOk ResponseState = 0
  ResponseState_StateErrorBusiness ResponseState = 1
  ResponseState_StateErrorEmpty ResponseState = 2
)

func (p ResponseState) String() string {
  switch p {
  case ResponseState_StateOk: return "StateOk"
  case ResponseState_StateErrorBusiness: return "StateErrorBusiness"
  case ResponseState_StateErrorEmpty: return "StateErrorEmpty"
  }
  return "<UNSET>"
}

func ResponseStateFromString(s string) (ResponseState, error) {
  switch s {
  case "StateOk": return ResponseState_StateOk, nil 
  case "StateErrorBusiness": return ResponseState_StateErrorBusiness, nil 
  case "StateErrorEmpty": return ResponseState_StateErrorEmpty, nil 
  }
  return ResponseState(0), fmt.Errorf("not a valid ResponseState string")
}


func ResponseStatePtr(v ResponseState) *ResponseState { return &v }

func (p ResponseState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResponseState) UnmarshalText(text []byte) error {
q, err := ResponseStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResponseState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResponseState(v)
return nil
}

func (p * ResponseState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Code
//  - Desc
//  - Data
type Response struct {
  Code ResponseState `thrift:"code,1" db:"code" json:"code"`
  Desc string `thrift:"desc,2" db:"desc" json:"desc"`
  Data string `thrift:"data,3" db:"data" json:"data"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetCode() ResponseState {
  return p.Code
}

func (p *Response) GetDesc() string {
  return p.Desc
}

func (p *Response) GetData() string {
  return p.Data
}
func (p *Response) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Response)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ResponseState(v)
  p.Code = temp
}
  return nil
}

func (p *Response)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Desc = v
}
  return nil
}

func (p *Response)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *Response) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *Response) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("desc", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:desc: ", p), err) }
  if err := oprot.WriteString(string(p.Desc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.desc (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:desc: ", p), err) }
  return err
}

func (p *Response) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

type EngineService interface {
  // Parameters:
  //  - AssetType
  GetType(ctx context.Context, assetType AssetType) (r *Response, err error)
  // Parameters:
  //  - Stype
  GetStrategy(ctx context.Context, stype string) (r *Response, err error)
  // Parameters:
  //  - AssetType
  //  - Ctype
  //  - Source
  //  - Sub
  GetClassify(ctx context.Context, assetType AssetType, ctype string, source string, sub string) (r *Response, err error)
  // Parameters:
  //  - AssetType
  //  - Ctype
  //  - Source
  //  - Tag
  //  - Name
  GetItem(ctx context.Context, assetType AssetType, ctype string, source string, tag string, name string) (r *Response, err error)
  // Parameters:
  //  - AssetType
  //  - Ctype
  //  - Source
  //  - Tag
  GetItemPoint(ctx context.Context, assetType AssetType, ctype string, source string, tag string) (r *Response, err error)
}

type EngineServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewEngineService instead
func NewEngineServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EngineServiceClient {
  return &EngineServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewEngineService instead
func NewEngineServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EngineServiceClient {
  return &EngineServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewEngineServiceClient(c thrift.TClient) *EngineServiceClient {
  return &EngineServiceClient{
    c: c,
  }
}

// Parameters:
//  - AssetType
func (p *EngineServiceClient) GetType(ctx context.Context, assetType AssetType) (r *Response, err error) {
  var _args0 EngineServiceGetTypeArgs
  _args0.AssetType = assetType
  var _result1 EngineServiceGetTypeResult
  if err = p.c.Call(ctx, "getType", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Stype
func (p *EngineServiceClient) GetStrategy(ctx context.Context, stype string) (r *Response, err error) {
  var _args2 EngineServiceGetStrategyArgs
  _args2.Stype = stype
  var _result3 EngineServiceGetStrategyResult
  if err = p.c.Call(ctx, "getStrategy", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - AssetType
//  - Ctype
//  - Source
//  - Sub
func (p *EngineServiceClient) GetClassify(ctx context.Context, assetType AssetType, ctype string, source string, sub string) (r *Response, err error) {
  var _args4 EngineServiceGetClassifyArgs
  _args4.AssetType = assetType
  _args4.Ctype = ctype
  _args4.Source = source
  _args4.Sub = sub
  var _result5 EngineServiceGetClassifyResult
  if err = p.c.Call(ctx, "getClassify", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - AssetType
//  - Ctype
//  - Source
//  - Tag
//  - Name
func (p *EngineServiceClient) GetItem(ctx context.Context, assetType AssetType, ctype string, source string, tag string, name string) (r *Response, err error) {
  var _args6 EngineServiceGetItemArgs
  _args6.AssetType = assetType
  _args6.Ctype = ctype
  _args6.Source = source
  _args6.Tag = tag
  _args6.Name = name
  var _result7 EngineServiceGetItemResult
  if err = p.c.Call(ctx, "getItem", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - AssetType
//  - Ctype
//  - Source
//  - Tag
func (p *EngineServiceClient) GetItemPoint(ctx context.Context, assetType AssetType, ctype string, source string, tag string) (r *Response, err error) {
  var _args8 EngineServiceGetItemPointArgs
  _args8.AssetType = assetType
  _args8.Ctype = ctype
  _args8.Source = source
  _args8.Tag = tag
  var _result9 EngineServiceGetItemPointResult
  if err = p.c.Call(ctx, "getItemPoint", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

type EngineServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler EngineService
}

func (p *EngineServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *EngineServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *EngineServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewEngineServiceProcessor(handler EngineService) *EngineServiceProcessor {

  self10 := &EngineServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["getType"] = &engineServiceProcessorGetType{handler:handler}
  self10.processorMap["getStrategy"] = &engineServiceProcessorGetStrategy{handler:handler}
  self10.processorMap["getClassify"] = &engineServiceProcessorGetClassify{handler:handler}
  self10.processorMap["getItem"] = &engineServiceProcessorGetItem{handler:handler}
  self10.processorMap["getItemPoint"] = &engineServiceProcessorGetItemPoint{handler:handler}
return self10
}

func (p *EngineServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x11.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x11

}

type engineServiceProcessorGetType struct {
  handler EngineService
}

func (p *engineServiceProcessorGetType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EngineServiceGetTypeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EngineServiceGetTypeResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.GetType(ctx, args.AssetType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getType: " + err2.Error())
    oprot.WriteMessageBegin("getType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type engineServiceProcessorGetStrategy struct {
  handler EngineService
}

func (p *engineServiceProcessorGetStrategy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EngineServiceGetStrategyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getStrategy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EngineServiceGetStrategyResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.GetStrategy(ctx, args.Stype); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStrategy: " + err2.Error())
    oprot.WriteMessageBegin("getStrategy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getStrategy", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type engineServiceProcessorGetClassify struct {
  handler EngineService
}

func (p *engineServiceProcessorGetClassify) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EngineServiceGetClassifyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getClassify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EngineServiceGetClassifyResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.GetClassify(ctx, args.AssetType, args.Ctype, args.Source, args.Sub); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClassify: " + err2.Error())
    oprot.WriteMessageBegin("getClassify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getClassify", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type engineServiceProcessorGetItem struct {
  handler EngineService
}

func (p *engineServiceProcessorGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EngineServiceGetItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EngineServiceGetItemResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.GetItem(ctx, args.AssetType, args.Ctype, args.Source, args.Tag, args.Name); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItem: " + err2.Error())
    oprot.WriteMessageBegin("getItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type engineServiceProcessorGetItemPoint struct {
  handler EngineService
}

func (p *engineServiceProcessorGetItemPoint) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EngineServiceGetItemPointArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItemPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EngineServiceGetItemPointResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.GetItemPoint(ctx, args.AssetType, args.Ctype, args.Source, args.Tag); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemPoint: " + err2.Error())
    oprot.WriteMessageBegin("getItemPoint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItemPoint", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - AssetType
type EngineServiceGetTypeArgs struct {
  AssetType AssetType `thrift:"assetType,1" db:"assetType" json:"assetType"`
}

func NewEngineServiceGetTypeArgs() *EngineServiceGetTypeArgs {
  return &EngineServiceGetTypeArgs{}
}


func (p *EngineServiceGetTypeArgs) GetAssetType() AssetType {
  return p.AssetType
}
func (p *EngineServiceGetTypeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EngineServiceGetTypeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AssetType(v)
  p.AssetType = temp
}
  return nil
}

func (p *EngineServiceGetTypeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getType_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EngineServiceGetTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("assetType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assetType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AssetType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.assetType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assetType: ", p), err) }
  return err
}

func (p *EngineServiceGetTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EngineServiceGetTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EngineServiceGetTypeResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEngineServiceGetTypeResult() *EngineServiceGetTypeResult {
  return &EngineServiceGetTypeResult{}
}

var EngineServiceGetTypeResult_Success_DEFAULT *Response
func (p *EngineServiceGetTypeResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return EngineServiceGetTypeResult_Success_DEFAULT
  }
return p.Success
}
func (p *EngineServiceGetTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EngineServiceGetTypeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EngineServiceGetTypeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EngineServiceGetTypeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getType_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EngineServiceGetTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EngineServiceGetTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EngineServiceGetTypeResult(%+v)", *p)
}

// Attributes:
//  - Stype
type EngineServiceGetStrategyArgs struct {
  Stype string `thrift:"stype,1" db:"stype" json:"stype"`
}

func NewEngineServiceGetStrategyArgs() *EngineServiceGetStrategyArgs {
  return &EngineServiceGetStrategyArgs{}
}


func (p *EngineServiceGetStrategyArgs) GetStype() string {
  return p.Stype
}
func (p *EngineServiceGetStrategyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EngineServiceGetStrategyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Stype = v
}
  return nil
}

func (p *EngineServiceGetStrategyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStrategy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EngineServiceGetStrategyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stype", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stype: ", p), err) }
  if err := oprot.WriteString(string(p.Stype)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stype (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stype: ", p), err) }
  return err
}

func (p *EngineServiceGetStrategyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EngineServiceGetStrategyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EngineServiceGetStrategyResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEngineServiceGetStrategyResult() *EngineServiceGetStrategyResult {
  return &EngineServiceGetStrategyResult{}
}

var EngineServiceGetStrategyResult_Success_DEFAULT *Response
func (p *EngineServiceGetStrategyResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return EngineServiceGetStrategyResult_Success_DEFAULT
  }
return p.Success
}
func (p *EngineServiceGetStrategyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EngineServiceGetStrategyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EngineServiceGetStrategyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EngineServiceGetStrategyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStrategy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EngineServiceGetStrategyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EngineServiceGetStrategyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EngineServiceGetStrategyResult(%+v)", *p)
}

// Attributes:
//  - AssetType
//  - Ctype
//  - Source
//  - Sub
type EngineServiceGetClassifyArgs struct {
  AssetType AssetType `thrift:"assetType,1" db:"assetType" json:"assetType"`
  Ctype string `thrift:"ctype,2" db:"ctype" json:"ctype"`
  Source string `thrift:"source,3" db:"source" json:"source"`
  Sub string `thrift:"sub,4" db:"sub" json:"sub"`
}

func NewEngineServiceGetClassifyArgs() *EngineServiceGetClassifyArgs {
  return &EngineServiceGetClassifyArgs{}
}


func (p *EngineServiceGetClassifyArgs) GetAssetType() AssetType {
  return p.AssetType
}

func (p *EngineServiceGetClassifyArgs) GetCtype() string {
  return p.Ctype
}

func (p *EngineServiceGetClassifyArgs) GetSource() string {
  return p.Source
}

func (p *EngineServiceGetClassifyArgs) GetSub() string {
  return p.Sub
}
func (p *EngineServiceGetClassifyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EngineServiceGetClassifyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AssetType(v)
  p.AssetType = temp
}
  return nil
}

func (p *EngineServiceGetClassifyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ctype = v
}
  return nil
}

func (p *EngineServiceGetClassifyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *EngineServiceGetClassifyArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sub = v
}
  return nil
}

func (p *EngineServiceGetClassifyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClassify_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EngineServiceGetClassifyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("assetType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assetType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AssetType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.assetType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assetType: ", p), err) }
  return err
}

func (p *EngineServiceGetClassifyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ctype", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ctype: ", p), err) }
  if err := oprot.WriteString(string(p.Ctype)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ctype (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ctype: ", p), err) }
  return err
}

func (p *EngineServiceGetClassifyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source: ", p), err) }
  if err := oprot.WriteString(string(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source: ", p), err) }
  return err
}

func (p *EngineServiceGetClassifyArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sub", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sub: ", p), err) }
  if err := oprot.WriteString(string(p.Sub)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sub (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sub: ", p), err) }
  return err
}

func (p *EngineServiceGetClassifyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EngineServiceGetClassifyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EngineServiceGetClassifyResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEngineServiceGetClassifyResult() *EngineServiceGetClassifyResult {
  return &EngineServiceGetClassifyResult{}
}

var EngineServiceGetClassifyResult_Success_DEFAULT *Response
func (p *EngineServiceGetClassifyResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return EngineServiceGetClassifyResult_Success_DEFAULT
  }
return p.Success
}
func (p *EngineServiceGetClassifyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EngineServiceGetClassifyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EngineServiceGetClassifyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EngineServiceGetClassifyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClassify_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EngineServiceGetClassifyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EngineServiceGetClassifyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EngineServiceGetClassifyResult(%+v)", *p)
}

// Attributes:
//  - AssetType
//  - Ctype
//  - Source
//  - Tag
//  - Name
type EngineServiceGetItemArgs struct {
  AssetType AssetType `thrift:"assetType,1" db:"assetType" json:"assetType"`
  Ctype string `thrift:"ctype,2" db:"ctype" json:"ctype"`
  Source string `thrift:"source,3" db:"source" json:"source"`
  Tag string `thrift:"tag,4" db:"tag" json:"tag"`
  Name string `thrift:"name,5" db:"name" json:"name"`
}

func NewEngineServiceGetItemArgs() *EngineServiceGetItemArgs {
  return &EngineServiceGetItemArgs{}
}


func (p *EngineServiceGetItemArgs) GetAssetType() AssetType {
  return p.AssetType
}

func (p *EngineServiceGetItemArgs) GetCtype() string {
  return p.Ctype
}

func (p *EngineServiceGetItemArgs) GetSource() string {
  return p.Source
}

func (p *EngineServiceGetItemArgs) GetTag() string {
  return p.Tag
}

func (p *EngineServiceGetItemArgs) GetName() string {
  return p.Name
}
func (p *EngineServiceGetItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EngineServiceGetItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AssetType(v)
  p.AssetType = temp
}
  return nil
}

func (p *EngineServiceGetItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ctype = v
}
  return nil
}

func (p *EngineServiceGetItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *EngineServiceGetItemArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *EngineServiceGetItemArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *EngineServiceGetItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EngineServiceGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("assetType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assetType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AssetType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.assetType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assetType: ", p), err) }
  return err
}

func (p *EngineServiceGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ctype", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ctype: ", p), err) }
  if err := oprot.WriteString(string(p.Ctype)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ctype (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ctype: ", p), err) }
  return err
}

func (p *EngineServiceGetItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source: ", p), err) }
  if err := oprot.WriteString(string(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source: ", p), err) }
  return err
}

func (p *EngineServiceGetItemArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tag: ", p), err) }
  return err
}

func (p *EngineServiceGetItemArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:name: ", p), err) }
  return err
}

func (p *EngineServiceGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EngineServiceGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EngineServiceGetItemResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEngineServiceGetItemResult() *EngineServiceGetItemResult {
  return &EngineServiceGetItemResult{}
}

var EngineServiceGetItemResult_Success_DEFAULT *Response
func (p *EngineServiceGetItemResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return EngineServiceGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *EngineServiceGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EngineServiceGetItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EngineServiceGetItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EngineServiceGetItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EngineServiceGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EngineServiceGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EngineServiceGetItemResult(%+v)", *p)
}

// Attributes:
//  - AssetType
//  - Ctype
//  - Source
//  - Tag
type EngineServiceGetItemPointArgs struct {
  AssetType AssetType `thrift:"assetType,1" db:"assetType" json:"assetType"`
  Ctype string `thrift:"ctype,2" db:"ctype" json:"ctype"`
  Source string `thrift:"source,3" db:"source" json:"source"`
  Tag string `thrift:"tag,4" db:"tag" json:"tag"`
}

func NewEngineServiceGetItemPointArgs() *EngineServiceGetItemPointArgs {
  return &EngineServiceGetItemPointArgs{}
}


func (p *EngineServiceGetItemPointArgs) GetAssetType() AssetType {
  return p.AssetType
}

func (p *EngineServiceGetItemPointArgs) GetCtype() string {
  return p.Ctype
}

func (p *EngineServiceGetItemPointArgs) GetSource() string {
  return p.Source
}

func (p *EngineServiceGetItemPointArgs) GetTag() string {
  return p.Tag
}
func (p *EngineServiceGetItemPointArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EngineServiceGetItemPointArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AssetType(v)
  p.AssetType = temp
}
  return nil
}

func (p *EngineServiceGetItemPointArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ctype = v
}
  return nil
}

func (p *EngineServiceGetItemPointArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *EngineServiceGetItemPointArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *EngineServiceGetItemPointArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemPoint_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EngineServiceGetItemPointArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("assetType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assetType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AssetType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.assetType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assetType: ", p), err) }
  return err
}

func (p *EngineServiceGetItemPointArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ctype", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ctype: ", p), err) }
  if err := oprot.WriteString(string(p.Ctype)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ctype (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ctype: ", p), err) }
  return err
}

func (p *EngineServiceGetItemPointArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source: ", p), err) }
  if err := oprot.WriteString(string(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source: ", p), err) }
  return err
}

func (p *EngineServiceGetItemPointArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tag: ", p), err) }
  return err
}

func (p *EngineServiceGetItemPointArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EngineServiceGetItemPointArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EngineServiceGetItemPointResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEngineServiceGetItemPointResult() *EngineServiceGetItemPointResult {
  return &EngineServiceGetItemPointResult{}
}

var EngineServiceGetItemPointResult_Success_DEFAULT *Response
func (p *EngineServiceGetItemPointResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return EngineServiceGetItemPointResult_Success_DEFAULT
  }
return p.Success
}
func (p *EngineServiceGetItemPointResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EngineServiceGetItemPointResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EngineServiceGetItemPointResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EngineServiceGetItemPointResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemPoint_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EngineServiceGetItemPointResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EngineServiceGetItemPointResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EngineServiceGetItemPointResult(%+v)", *p)
}


